#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct Date {
    char jour [3];
    char mois [3];
    char annee [5];
} Date;
typedef struct Produit {
    char Nom_produit [50];
    char Reference[100];
    float Montant;
    Date Date_achat;
} Produit;
typedef struct Liste {
    Produit cellule;
    struct Liste *suivant;
} Liste;
Liste *creer_liste (){
return NULL;
}
int est_vide (Liste *liste){
return liste==NULL;
}
Produit creer_produit (char nom,char ref,float montant,char *jour,char *mois,char *annee){
    Produit p;
    strcpy(p.Nom_produit,nom);
    strcpy(p.Reference,ref);
    p.Montant=montant;
    strcpy(p.Date_achat.jour,jour);
    strcpy(p.Date_achat.mois,mois);
    strcpy(p.Date_achat.annee,annee);
    return p;
}
void afficher_produit (Produit p){
    printf("nom du produit : %s\n",p.Nom_produit);
    printf("reference du produit : %s\n",p.Reference);
    printf("montant du produit : %f\n",p.Montant);
    printf("date d'achat du produit : %s/%s/%s\n",p.Date_achat.jour,p.Date_achat.mois,p.Date_achat.annee); 
}
Liste *ajouter_debut (Liste *tete,Produit p){
    Liste nouveau=(Liste)malloc(sizeof(Liste));
    nouveau->cellule=p;
    nouveau->suivant=tete;
    return nouveau;
}
Liste *ajouter_fin (Liste *tete,Produit p){
    Liste nouveau=(Liste)malloc(sizeof(Liste));
    Liste *courant=tete;
    nouveau->cellule=p;
    nouveau->suivant=NULL;
    if (est_vide(tete)){
        return nouveau;
    }
    while (courant->suivant!=NULL){
        courant=courant->suivant;

    }
    courant->suivant=nouveau;
    return tete;
}
void afficher_produits(liste*debut){
    liste*p;
    if(debut==NULL){
        printf("la liste est vide");
    }
    else{
       p=debut; 
       while(p!=NULL){
        printf("-----------------produit----------------");
    printf("nom %s",nv->cellule.nom_produit);
    printf("la reference :%s\n",nv->cellule.Reference);
    printf("le mntant :%f\n",nv->cellule.Montant);
    printf("la date d_achat est %s %s %s",nv->cellule.DateAchat.jour,nv->cellule.DateAchat.mois,nv->DateAchat.annee);
        p=p->psuiv;
       }
    }
    
}
int longueur(liste*debut){
    int c=0;
    liste *nv=debut;
while(nv!=NULL){
    c++;
    nv=nv->psuiv;
} return c;
}
void filtrer_date(liste*debut,Date dt){
    liste *p=debut;
    if(debut==NULL){
        printf("liste est vide");
    }
    else{
        while(p){
            if(strcmp(nv->cellule.DateAchat.jour,dt.jour)==0 && strcmp(nv->cellule.DateAchat.mois,dt.mois)==0 && strcmp(nv->cellule.DateAchat.annee,dt.annee)==0 && )
            afficher_produit(p);

        }p=p->psuiv;
    }

}
liste*supprimer_debut(liste*debut){
    if(debut!=NULL){
        noeud*p=debut;
        debut=p->psuiv;
        free(p);
        return debut;
    }
}
void supprimer_fin(liste*debut){
    noeud*nv=debut;
    if(debut!=NULL){
        while(nv->psuiv->psuiv!=NULL){
            nv=nv->psuiv;
        }
        free(nv->psuivt);
        nv->psuiv=NULL;
        return debut;
    }
}
